#!/bin/bash

# command line argument
ARG=$1

# colors
GREEN="\e[0;32m"
NO_COLOR="\e[0;0m"

#
# prints usage of git-cheat
#
function usage {
    echo "Usage: git-cheat [option]"
    echo ""
    echo "Mandatory arguments:"
    
    echo ""
    echo -e $GREEN " --config -c"        $NO_COLOR "       --> git configuration" $NO_COLOR
    echo -e $GREEN " --init -i"          $NO_COLOR "         --> cration of new project" $NO_COLOR
    echo -e $GREEN " --add -a"           $NO_COLOR "          --> adding files to git" $NO_COLOR
    echo -e $GREEN " --delete -d"        $NO_COLOR "       --> deleting files from git" $NO_COLOR
    echo -e $GREEN " --commit -cm"       $NO_COLOR "      --> git commit helper" $NO_COLOR
    echo -e $GREEN " --branch -b"        $NO_COLOR "       --> git branching info" $NO_COLOR
    echo -e $GREEN " --merge -m"         $NO_COLOR "        --> git merging info" $NO_COLOR
    echo -e $GREEN " --update -u"        $NO_COLOR "       --> updating current repo" $NO_COLOR
    echo -e $GREEN " --stash -st"        $NO_COLOR "       --> stashing in current repo" $NO_COLOR
    echo -e $GREEN " --inspect -in"      $NO_COLOR "     --> git inspection, log,show..." $NO_COLOR
    echo -e $GREEN " --remote -r"        $NO_COLOR "       --> git remote helper" $NO_COLOR
    echo -e $GREEN " --patch -p"         $NO_COLOR "        --> git patching helper" $NO_COLOR
    echo -e $GREEN " --debug -dg"        $NO_COLOR "       --> git debugging" $NO_COLOR
    echo -e $GREEN " --email -e"         $NO_COLOR "        --> git email helper" $NO_COLOR
    echo -e $GREEN " --tags -t"          $NO_COLOR "         --> git tags helper" $NO_COLOR
    echo -e $GREEN " --reset -rs"        $NO_COLOR "       --> git reset helper" $NO_COLOR
    echo -e $GREEN " --conflict -cn"     $NO_COLOR "    --> git conflict resolving helper" $NO_COLOR
    echo -e $GREEN " --revert -rv"       $NO_COLOR "      --> git reverting helper" $NO_COLOR
    echo -e $GREEN " --fix-mistakes -f"  $NO_COLOR " --> fix mistakes in git" $NO_COLOR
    echo -e $GREEN " --submodules -sm"   $NO_COLOR "  --> git submodules helper" $NO_COLOR
    echo -e $GREEN " --archive -ar"      $NO_COLOR "     --> archive your repo" $NO_COLOR
    echo ""
    
    echo -e $GREEN " --help -h ?"    $NO_COLOR "       --> prints usage of git-cheat" $NO_COLLOR
    echo -e $GREEN " --version -v" $NO_COLOR "      --> prints version of git-cheat" $NO_COLOR
    echo ""
    echo -e $WHITE"Report bugs and contribution at: https://github.com/0xAX/git-cheat"
}

function config {
    echo ""
    echo "git configuration"
    echo "================="
    echo ""
    
    echo "git --config -e [--global]"
    echo "    edit the .git/config [or ~/.gitconfig] file in your $EDITOR"
    echo ""

    echo "git config --global user.name 'Name SecondName'"
    echo "    sets your name"
    echo ""

    echo "git config --global user.email 'email@email.com'"
    echo "    sets your email"
    echo ""

    echo "git config core.autocrlf true"
    echo "    this setting tells git to convert the newlines to the system's standard"
    echo "    when checking out files, and to LF newlines when committing in"
    echo ""

    echo "git config --list"
    echo "    prints list of all config options."
    echo ""

    echo "git config apply.whitespace nowarn"
    echo "    to ignore whitespace"
    echo ""
}

function init {
    echo ""
    echo "git repository getting and creation"
    echo "==================================="
    echo ""
    
    echo "git init"
    echo "    create new repository in the current dir"
    echo ""

    echo ""'git clone ssh://user@domain.com/repo.git'""
    echo "    clone an existing repository to the repo dir"
    echo ""

    echo ""'git clone ssh://user@domain.com/repo.git <my-repo>'""
    echo "    clone an existing repository to the <my-repo> dir"
    echo ""

    echo ""'git clone ssh://user@domain.com/repo.git --branch <my-branch>'""
    echo "    clone an existing repository to the repo dir with checkouting <my-branch> instead of the remote's HEAD"
    echo ""

    echo ""'git clone ssh://user@domain.com/repo.git --depth 1'""
    echo "    clone an existing repository to the repo dir without history only with last commit"
    echo ""
}

function add {
    echo ""
    echo "adding files to the git"
    echo "======================="
    echo ""

    echo "git add <file1> <file2> ..."
    echo "    add <file1>, <file2>, etc... to the project"
    echo ""

    echo "git add <dir>"
    echo "    add <dir> to the project"
    echo ""

    echo "git add ."
    echo "    add all files besides included in .gitignore"
    echo ""

    echo "git add -i"
    echo "    add modified contents in the working tree interactively to the index."
    echo ""
}

function delete {
    echo ""
    echo "deleting files from the git repository"
    echo "======================================"
    echo ""

    echo "git rm <file1> <file2> ..."
    echo "    remove <file1>, <file2>, etc... from the project"
    echo ""

    echo "git rm "'$(git ls-files --deleted)'""
    echo "    remove all deleted files from the project"
    echo ""

    echo "git rm --cached <file1> <file2> ..."
    echo "    only remove from the index"
    echo ""

    echo "git rm -r <dir>"
    echo "    remove <dir> from the project"
    echo ""
}

function commit {
    echo ""
    echo "git commiting"
    echo "============="
    echo ""

    echo "git commit <file1> <file2> ... [-m <msg>]"
    echo "    commit <file1>, <file2>, etc..., optionally using commit message <msg>."
    echo "    otherwise opening your editor to let you type a commit message"
    echo ""

    echo "git commit -a"
    echo "    commit all files changed since your last commit"
    echo ""

    echo "git commit -v"
    echo "    commit verbosely, i.e. includes the diff of the contents being committed in"
    echo "    the commit message screen"
    echo ""
}

function branch {
    echo ""
    echo "git branching"
    echo "============="
    echo ""

    echo "git branch"
    echo "    list all local branches"
    echo "" 

    echo "git branch -r"
    echo "    list all remote branches"
    echo "" 

    echo "git branch -a"
    echo "    list all local and remote branches"
    echo "" 

    echo "git branch <branch>"
    echo "    create a new branch named <branch>, referencing the same point in history as"
    echo "    the current branch"
    echo "" 

    echo "git branch --track <branch> <remote-branch>"
    echo "    create a tracking branch. Will push/pull changes to/from another repository."
    echo "" 

    echo "git branch --set-upstream <branch> <remote-branch>"
    echo "    make an existing branch track a remote branch"
    echo "" 

    echo "git branch -d <branch>"
    echo "    remove local branch"
    echo "" 

    echo "git branch -r -d <remote-branch>"
    echo "    delete a remote tracking branch"
    echo "" 

    echo "git checkout <branch>"
    echo "    make the current branch - <branch>"
    echo "" 

    echo "git checkout -b <new> <start-point>"
    echo "    create a new branch <new> referencing <start-point>, and check it out."
    echo "" 

    echo "git push :<branch>"
    echo "    remove remote <branch> from current repo"
    echo "" 

    echo "git branch -r -d <remote-branch>"
    echo "    delete a remote tracking branch"
    echo "" 

}

function merge {
    echo ""
    echo "git merging"
    echo "==========="
    echo ""

    echo "git merge <branch>"
    echo "    merge <branch> with current branch"
    echo ""

    echo "git merge <branch> --no-commit"
    echo "    merge branch <branch> into the current branch, but do not autocommit."
    echo ""

    echo "git merge <branch>"
    echo "    merge <branch> with current branch"
    echo ""
}

function update {
    echo ""
    echo "updating current repository"
    echo "==========================="
    echo ""

    echo "git fetch <remote>"
    echo "    update the remote-tracking branches for <remote> (defaults to "'origin'")."
    echo "    Does not initiate a merge into the current branch"
    echo ""

    echo "git pull"
    echo "    fetch changes from the server, and merge them into the current branch."
    echo ""

    echo "git push"
    echo "    merge <branch> with current branch"
    echo ""

    echo "git push origin <branch>"
    echo "    update the server with your commits across all branches that are common"
    echo "    between your local copy and the server."
    echo ""
}

function stash {
    echo ""
    echo "git stashing"
    echo "============"
    echo ""

    echo "git stash"
    echo "    save your local modifications to a new stash"
    echo ""

    echo "git stash save <optional-name>"
    echo "    save your local modifications to a new stash with <optional-name>"
    echo ""

    echo "git stash apply"
    echo "    restore the changes recorded in the stash on top of the current working tree state"
    echo ""

    echo "git stash pop"
    echo "    restore the changes from the most recent stash"
    echo ""

    echo "git stash list"
    echo "    list all current stashes"
    echo ""

    echo "git stash drop <stash-name>"
    echo "    delete the stash with <stash-name>"
    echo ""

    echo "git stash clear"
    echo "    delete all current stashes"
    echo ""

}

function inspect {
    echo ""
    echo "getting info about git repository"
    echo "================================="
    echo ""

    echo "git log"
    echo "    show recent commits, most recent on top. Useful options:"
    echo "    --color       with color"
    echo "    --graph       with an ASCII-art commit graph on the left"
    echo "    --decorate    with branch and tag names on appropriate commits"
    echo "    --stat        with stats (files changed, insertions, and deletions)"
    echo "    -p            with full diffs"
    echo "    --author=foo  only by a certain author"
    echo "    --after="'MMM DD YYYY'" ex. ("'un 20 2008'") only commits after a certain date"
    echo "    --before="'MMM DD YYYY'" only commits that occur before a certain date"
    echo "    --merge       only the commits involved in the current merge conflicts"
    echo ""

    echo "git status"
    echo "    show files added to the staging area, files with changes, and untracked files"
    echo ""

    echo "git diff"
    echo "    show a diff of the changes made since your last commit"
    echo ""

    echo "git log <ref1>..<ref2>"
    echo "    show commits between the <ref1> and <ref2>."
    echo ""

    echo "git log number"
    echo "    show last number commits"
    echo ""

    echo "git show <rev>"
    echo "    show the changeset (diff) of a commit specified by <rev>"
    echo ""

    echo "git show --name-only <rev>"
    echo "    show only the names of the files that changed, no diff information."
    echo ""

    echo "git ls-files"
    echo "    list all files in the index and under version control."
    echo "" 
}

function remote {
    echo ""
    echo "git remotes"
    echo "==========="
    echo ""
    
    echo "git remote add <remote> <remote_URL>"
    echo "    adds a remote repository to your git config."
    echo "" 

    echo "git push <repository> +<remote>:<new_remote>"
    echo "    replace a <remote> branch with <new_remote>."
    echo "" 

    echo "git remote add -t master -m master origin git://example.com/git.git/"
    echo "    add a remote and track its master."
    echo "" 

    echo "git remote show <remote>"
    echo "    show information about remote server."
    echo "" 

    echo "git checkout -b <local branch> <remote>/<remote branch>"
    echo "    Track a remote branch as a local branch."
    echo "" 
}

function patch {
    echo ""
    echo "git patching"
    echo "============"
    echo ""

    echo "git format-patch HEAD^"
    echo "    generate the last commit as a patch that can be applied on another"
    echo "    clone (or branch) using 'git am'.."
    echo ""

    echo "git format-patch <rev>^..<rev>"
    echo "    generate a patch for a single commit."
    echo "" 

    echo "git am <patch file>"
    echo "    apply the patch file generated by format-patch.."
    echo "" 

    echo "git diff --no-prefix > patchfile"
    echo "    generate a patch file that can be applied using patch: patch -p0 < patchfile."
    echo ""
}

function debug {
    echo ""
    echo "git debugging"
    echo "============="
    echo ""

    echo "git blame <file>"
    echo "    show who authored each line in <file>"
    echo "" 

    echo "git blame <file> <rev>"
    echo "    show who authored each line in <file> as of <rev>"
    echo "" 

    echo "git grep -e <regexp> <my_other_branch> -- '*.erl'"
    echo "    search for our regexp in erlang files from <my-another-branch>"
    echo "" 

    echo "git grep --cached -e <regexp>"
    echo "    search files registered in the index, rather than the working tree"
    echo "" 

    echo "git log -G <regexp>"
    echo "    search for commits whose changes include your regexp"
    echo "" 

}

function email {
    echo ""
    echo "git email"
    echo "========="
    echo ""

    echo "git send-email -1"
    echo "    send last commit from the current branch"
    echo ""

    echo "git send-email -1 <rev>"
    echo "    send commit with hash - <rev>"
    echo ""

    echo "git send-email configuration:"
    echo "    git config --global sendemail.smtpencryption tls"
    echo "    git config --global sendemail.smtpserver mail.smtp.com"
    echo "    git config --global sendemail.smtpuser user@email.com"
    echo "    git config --global sendemail.smtpserverport 587"
    echo "    git config --global sendemail.smtppass password"
    echo "    git config sendemail.to patch@lists.org"
    echo ""
}

function tags {
    echo ""
    echo "git tags"
    echo "========"
    echo ""

    echo "git tag -l"
    echo "    list all tags defined in the repository"
    echo ""

    echo "git co <tag_name>"
    echo "    checkout the code for a particular tag"
    echo ""

    echo "git tag -a -m "'Tagging release 1.0'" v1.0"
    echo "    create tag with message"
    echo ""

    echo "git tag -d <tag>"
    echo "    remove local tag <tag>"
    echo ""

    echo "git push origin --tags"
    echo "    push local tags to the remote server"
    echo ""

    echo "git push origin :refs/tags/<tag>"
    echo "    remove tag <tag> from remote server"
    echo ""

}

function reset {
    echo ""
    echo "git reseting"
    echo "============"
    echo ""

    echo "git reset HEAD <file1> <file2> ..."
    echo "    remove the specified files from the next commit"
    echo "" 
}

function conflict {
    echo ""
    echo "git conflicts fixing"
    echo "===================="
    echo ""

    echo "git mergetool"
    echo "    work through conflicted files by opening them in your mergetool"
    echo "" 

}

function revert {
    echo ""
    echo "git reverting"
    echo "============="
    echo ""

    echo "git revert <rev>"
    echo "    reverse commit specified by <rev> and commit the result."
    echo "" 

    echo "git checkout <file>"
    echo "    re-checkout <file>, overwriting any local changes"
    echo ""

    echo "git checkout -- <file>"
    echo "    undo last changes in unstaged <file>"
    echo ""
    
    echo "git checkout ."
    echo "    recheckout all files"
    echo "" 
}

function fix-mistakes {
    echo ""
    echo "fixing mistakes"
    echo "==============="
    echo ""

    echo "git reset --hard"
    echo "    abandon everything since your last commit"
    echo "" 
    
    echo "git reset --soft HEAD^"
    echo "    undo your last commit, but keep the changes in the staging area for editing."
    echo "" 

    echo "git commit --amend"
    echo "    redo previous commit, including changes you've staged in the meantime."
    echo ""
    
}

function submodules {
    echo ""
    echo "git submodules"
    echo "================="
    echo ""

    echo "git submodule add <remote_repository> <path/to/submodule"
    echo "    add the given repository at the given path."
    echo "" 

    echo "git submodule update [--init]"
    echo "    update the registered submodules (clone missing submodules, and checkout"
    echo "    the commit specified by the super-repo)"
    echo "" 

    echo "removing submodules:"
    echo "    1. Delete the relevant line from the .gitmodules file"
    echo "    2. Delete the relevant section from .git/config"
    echo "    3. Run git rm --cached path_to_submodule"
    echo "    4. Commit and delete the now untracked submodule files"
    echo "" 

    echo "Updating git submodule"
    echo "    cd <path to submodule>"
    echo "    git pull"
    echo "    cd <path to toplevel>"
    echo "    git commit -m "'update submodule version'""
    echo "    recheckout all files"
    echo ""
}

function archive {
    echo ""
    echo "archive your git repository"
    echo "==========================="
    echo ""

    echo "git checkout ."
    echo "    recheckout all files"
    echo "" 

    echo "git checkout ."
    echo "    recheckout all files"
    echo "" 

    echo "git checkout ."
    echo "    recheckout all files"
    echo "" 
}

case "$ARG" in
    --config | -c)
        config
        ;;
    --init | -i)
        init
        ;;
    --add | -a)
        add
        ;;
    --delete | -d)
        delete
        ;;
    --commit | -cm)
        commit
        ;;
    --branch | -b)
        branch
        ;;
    --merge | -m)
        merge
        ;;
    --update | -u)
        update
        ;;
    --stash | -st)
        stash
        ;;
    --inspect | -in)
        inspect
        ;;
    --remote | -r)
        remote
        ;;
    --patch | -p)
        patch
        ;;
    --debug | -dg)
        debug
        ;;
    --email | -e)
        email
        ;;
    --tags | -t)
        tags
        ;;
    --reset | -rs)
        reset
        ;;
    --conflict | -cn)
        conflict
        ;;
    --revert | -rv)
        revert
        ;;
    --fix-mistakes | -fm)
        fix-mistakes
        ;;
    --submodules | -sm)
        submodules
        ;;
    --archive | -ar)
        archive
        ;;
    --help | -h)
        usage
        ;;
    --version | -v)
        echo "git-cheat-1.0"
        ;;
    *)
        usage
        ;;
esac
